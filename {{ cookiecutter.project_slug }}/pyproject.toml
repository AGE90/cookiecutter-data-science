[tool.poetry]
name = "{{ cookiecutter.module_name }}"
version = "{{ cookiecutter.project_version }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
license = "{{ cookiecutter.license }}"
readme = "README.md"
homepage = "{{ cookiecutter.project_url }}"
repository = "{{ cookiecutter.project_url }}"
documentation = "{{ cookiecutter.project_url }}/docs"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: {{ cookiecutter.python_version }}",
    "License :: OSI Approved :: {{ cookiecutter.license }}",
    "Operating System :: OS Independent",
]
packages = [{ include = "{{ cookiecutter.module_name }}", from = "src" }]

[tool.poetry.dependencies]
python = "{{ cookiecutter.python_version }}"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
my-cli = "{{ cookiecutter.module_name }}.__main__:main"

# Configure pytest
[tool.pytest.ini_options]
addopts = "--cov=src"
testpaths = ["tests"]

# Configure mypy
[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

# Configure black
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

# Configure ruff
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.isort]
known-first-party = ["{{ cookiecutter.module_name }}"]
